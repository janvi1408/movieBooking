package com.cg.order.exception;


import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;




@ControllerAdvice
public class ExcptionHandler extends ResponseEntityExceptionHandler{
	@ExceptionHandler(InvalidOrderId.class)
	public ResponseEntity<String> invalidId(InvalidOrderId e) {
		return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
	}
	
	@ExceptionHandler(InvalidCategoryId.class)
	public ResponseEntity<String> invalidId(InvalidCategoryId e) {
		return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
	}
	@ExceptionHandler(InvalidProductId.class)
	public ResponseEntity<String> invalidId(InvalidProductId e) {
		return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
	}
	
	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			org.springframework.http.HttpHeaders headers, HttpStatusCode status, WebRequest request) {
		Map<String, Object> objectBody = new LinkedHashMap<>();

		objectBody.put("Current Timestamp", new Date());

		objectBody.put("Status", status.value());

		// Get all errors

		List<String> exceptionalErrors = ex.getBindingResult()

				.getFieldErrors()

				.stream()

				.map(x -> x.getDefaultMessage())

				.collect(Collectors.toList());

		objectBody.put("Errors", exceptionalErrors);

		return new ResponseEntity<>(objectBody, status);

	}
}
