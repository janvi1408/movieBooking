package com.cg.banking.exception;

import java.net.http.HttpHeaders;
import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class ExceptionHandlers extends ResponseEntityExceptionHandler {
	@ExceptionHandler(InvalidAccountId.class)
	public ResponseEntity<String> invalidId(InvalidAccountId e) {
		return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(LessThanMinimum.class)
	public ResponseEntity<String> lessThanMinimum(LessThanMinimum e) {
		return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(InvalidUserId.class)
	public ResponseEntity<String> ivalidUserId(InvalidUserId e) {
		return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
	}

	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			org.springframework.http.HttpHeaders headers, HttpStatusCode status, WebRequest request) {
		// TODO Auto-generated method stub
		return super.handleMethodArgumentNotValid(ex, headers, status, request);
	}

	
//	@ExceptionHandler(MethodArgumentNotValidException.class)
//	public ResponseEntity<Map<String, String>> handleMethodArgumentNotValid(MethodArgumentNotValidException e) {
//		Map<String, String> resp = new HashMap<>();
//		e.getBindingResult() // to get binding results
//				.getAllErrors() // to get all the errors -list
//				.forEach((error) -> { // traversing the list using for each method and lambda func
//					String fieldname = ((FieldError) error).getField(); // typecasting error into field error to get
//																		// field where error is generating
//					String msg = error.getDefaultMessage();
//
//					resp.put(fieldname, msg);
//				});
//		return new ResponseEntity<Map<String, String>>(resp, HttpStatus.BAD_REQUEST);

//	}

//	@Override
//    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, org.springframework.http.HttpHeaders headers, HttpStatus status, WebRequest request) {
//        // Your custom handling code here
//        return super.handleMethodArgumentNotValid(ex, headers, status, request);
//    }
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<Map<String,String>> handleMethodArgumentNotValidException(MethodArgumentNotValidException ex){
	             Map<String, String> resp = new HashMap<> () ;
	             ex.getBindingResult().getAllErrors().forEach((error) ->{
	                 System.out.println(error.toString());
	                 String fieldName = ((FieldError) error).getField();
	                 String message = error.getDefaultMessage () ;
	                 resp.put (fieldName, message);
	             });

	return new ResponseEntity<Map<String, String>>(resp,HttpStatus.BAD_REQUEST);}
}
